<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Combat avec Google Sheets</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
</head>
<body>

<h1>‚öîÔ∏è Combat</h1>

<label for="joueurSelect">Choisir un joueur :</label>
<select id="joueurSelect"></select><br><br>

<label for="monstreSelect">Choisir un monstre :</label>
<select id="monstreSelect"></select><br><br>

<label for="competenceSelect">Choisir une comp√©tence :</label>
<select id="competenceSelect"></select><br><br>

<button id="startCombat">Lancer l'attaque</button>

<div id="log"></div>

<script>
// URLs des feuilles Google Sheets publi√©es en CSV
const urlJoueurs = 'URL_CSV_JOUEURS';
const urlMonstres = 'URL_CSV_MONSTRES';
const urlCompetences = 'URL_CSV_COMPETENCES';

let joueurs = [], monstres = [], competences = [];

// Fonction pour charger les donn√©es CSV
async function chargerCSV(url, type) {
  const response = await fetch(url);
  const csv = await response.text();
  const parsed = Papa.parse(csv, { header: true, skipEmptyLines: true });
  if (type === 'joueurs') joueurs = parsed.data;
  else if (type === 'monstres') monstres = parsed.data;
  else if (type === 'competences') competences = parsed.data;
}

// Initialisation
async function init() {
  await chargerCSV(urlJoueurs, 'joueurs');
  await chargerCSV(urlMonstres, 'monstres');
  await chargerCSV(urlCompetences, 'competences');
  remplirMenus();
}

// Remplir les menus d√©roulants
function remplirMenus() {
  const joueurSelect = document.getElementById('joueurSelect');
  joueurs.forEach((joueur, index) => {
    const option = document.createElement('option');
    option.value = index;
    option.textContent = `${joueur.nom} (PV: ${joueur.pv}, Atq: ${joueur.attaqueArme}, F: ${joueur.force})`;
    joueurSelect.appendChild(option);
  });

  const monstreSelect = document.getElementById('monstreSelect');
  monstres.forEach((monstre, index) => {
    const option = document.createElement('option');
    option.value = index;
    option.textContent = `${monstre.nom} (PV: ${monstre.pv}, F: ${monstre.force}, Def: ${monstre.defense})`;
    monstreSelect.appendChild(option);
  });

  const competenceSelect = document.getElementById('competenceSelect');
  competences.forEach((competence, index) => {
    const option = document.createElement('option');
    option.value = index;
    option.textContent = `${competence.nom} (${competence.type})`;
    competenceSelect.appendChild(option);
  });
}

// Fonction pour appliquer les faiblesses et affinit√©s
function appliquerMultiplicateur(attaqueType, monstre) {
  if (monstre.faiblesse && monstre.faiblesse.split(',').includes(attaqueType)) {
    return { mult: 1.5, msg: 'Super efficace !' };
  }
  if (monstre.affinite && monstre.affinite.split(',').includes(attaqueType)) {
    return { mult: 0.5, msg: 'Peu efficace...' };
  }
  return { mult: 1, msg: '' };
}

// Fonction pour calculer les d√©g√¢ts d'une attaque simple
function attaqueSimple(joueur, monstre) {
  const base = parseInt(joueur.attaqueArme) + parseInt(joueur.force) / 2;
  const { mult, msg } = appliquerMultiplicateur('physique', monstre);
  const degats = Math.round(base * mult);
  monstre.pv -= degats;
  return `${joueur.nom} utilise Attaque simple ‚Üí ${degats} d√©g√¢ts (${msg}), PV ${monstre.nom}: ${monstre.pv}`;
}

// Fonction pour calculer les d√©g√¢ts d'une attaque rapide
function attaqueRapide(joueur, monstre) {
  const base = parseInt(joueur.vitesse) + parseInt(joueur.attaqueArme) / 2;
  const { mult, msg } = appliquerMultiplicateur('physique', monstre);
  const degats = Math.round(base * mult);
  monstre.pv -= degats;
  return `${joueur.nom} utilise Attaque rapide ‚Üí ${degats} d√©g√¢ts (${msg}), PV ${monstre.nom}: ${monstre.pv}`;
}

// Fonction pour utiliser une comp√©tence sp√©ciale
function utiliserCompetence(joueur, monstre, competenceIndex) {
  if (competenceIndex === '') return 'Veuillez choisir une comp√©tence.';
  const c = competences[competenceIndex];
  let texte = '', degats = 0;
  if (c.type === 'attaque' || c.type === 'magique') {
    degats = Math.round(parseInt(joueur[c.base]) * parseFloat(c.multiplicateur));
    const { mult, msg } = appliquerMultiplicateur(c.type === 'attaque' ? 'physique' : 'magique', monstre);
    degats = Math.round(degats * mult);
    monstre.pv -= degats;
    texte = `${joueur.nom} utilise ${c.nom} ‚Üí ${degats} d√©g√¢ts (${msg}), PV ${monstre.nom}: ${monstre.pv}`;
  }
  if (c.type === 'soin') {
    const soin = Math.round(parseInt(joueur[c.base]) * parseFloat(c.multiplicateur) / 10);
    joueur.pv += soin;
    texte = `${joueur.nom} utilise ${c.nom} üíñ +${soin} PV (PV actuel: ${joueur.pv})`;
  }
  if (c.type === 'buff') {
    joueur[c.base] = Math.round(parseInt(joueur[c.base]) * parseFloat(c.multiplicateur));
    texte = `${joueur.nom} utilise ${c.nom} üí™ Stat ${c.base} augment√©e √† ${joueur[c.base]}`;
  }
  if (c.type === 'malus') {
    monstre[c.base] = Math.round(parseInt(monstre[c.base]) * parseFloat(c.multiplicateur));
    texte = `${joueur.nom} utilise ${c.nom} ‚ö†Ô∏è ${monstre.nom} ${c.base} r√©duit √† ${monstre[c.base]}`;
  }
  return texte;
}

// √âv√©nement au clic du bouton
document.getElementById('startCombat').addEventListener('click', () => {
  const joueur = joueurs[document.getElementById('joueurSelect').value];
  const monstre = monstres[document.getElementById('monstreSelect').value];
  const action = document.getElementById('attaqueSelect').value;
  const competenceIndex = document.getElementById('competenceSelect').value;
  let log = '';

  if (action === 'simple') log = attaqueSimple(joueur, monstre);
  else if (action === 'rapide') log = attaqueRapide(joueur, monstre);
  else if (action === 'competence') log = utiliserCompetence(joueur, monstre, competenceIndex);
  else log = 'Action invalide.';

  document.getElementById('log').innerHTML = log;

  if (parseInt(monstre.pv) <= 0) {
    document.getElementById('log').innerHTML += `<br>${joueur.nom} a vaincu ${monstre.nom} !`;
  }
});

// Initialiser le jeu
init();

</script>

</body>
</html>
